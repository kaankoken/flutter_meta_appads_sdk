// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: set_user_data_message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum FBUserDataType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case email // = 0
  case firstName // = 1
  case lastName // = 2
  case phone // = 3
  case dateOfBirth // = 4
  case gender // = 5
  case city // = 6
  case state // = 7
  case zip // = 8
  case country // = 9
  case externalID // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .email
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .email
    case 1: self = .firstName
    case 2: self = .lastName
    case 3: self = .phone
    case 4: self = .dateOfBirth
    case 5: self = .gender
    case 6: self = .city
    case 7: self = .state
    case 8: self = .zip
    case 9: self = .country
    case 10: self = .externalID
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .email: return 0
    case .firstName: return 1
    case .lastName: return 2
    case .phone: return 3
    case .dateOfBirth: return 4
    case .gender: return 5
    case .city: return 6
    case .state: return 7
    case .zip: return 8
    case .country: return 9
    case .externalID: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [FBUserDataType] = [
    .email,
    .firstName,
    .lastName,
    .phone,
    .dateOfBirth,
    .gender,
    .city,
    .state,
    .zip,
    .country,
    .externalID,
  ]

}

struct FBSetUserDataRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: FBUserDataType {
    get {return _type ?? .email}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: FBUserDataType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension FBUserDataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Email"),
    1: .same(proto: "FirstName"),
    2: .same(proto: "LastName"),
    3: .same(proto: "Phone"),
    4: .same(proto: "DateOfBirth"),
    5: .same(proto: "Gender"),
    6: .same(proto: "City"),
    7: .same(proto: "State"),
    8: .same(proto: "Zip"),
    9: .same(proto: "Country"),
    10: .same(proto: "ExternalId"),
  ]
}

extension FBSetUserDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FBSetUserDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FBSetUserDataRequest, rhs: FBSetUserDataRequest) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
